#ifndef MODEL_26_NNOM_H
#define MODEL_26_NNOM_H

#define APP_ACTIVITY_MODEL_NAME model_26_nnom
#define APP_ACTIVITY_RECOGNITION_PRECISION_FLOAT (0)
#define APP_ACTIVITY_RECOGNITION_SENSOR_SCALE (2)
#define APP_ACTIVITY_RECOGNITION_SENSOR_RESOLUTION (8)
#define APP_ACTIVITY_RECOGNITION_SAMPLING_FREQUENCY (10)
#define APP_ACTIVITY_RECOGNITION_FREQUENCY_DIVIDER (0)
#define APP_ACTIVITY_RECOGNITION_HIGHPASS_STAGES (2)
#define APP_ACTIVITY_RECOGNITION_INPUT_SIZE (192)
#define APP_ACTIVITY_RECOGNITION_STEP_SIZE (32)
#define APP_ACTIVITY_RECOGNITION_CLASS_COUNT (6)

#ifdef INCLUDE_MODEL
static const float highpass_coefficients[] = {0.2069928239055942f, -0.2069928239055942f, 0.0f, 0.2068179864931189f, -0.0f, 0.25f, -0.5f, 0.25f, 0.4490699651581907f, -0.2071676613180694f};
static const char* APP_ACTIVITY_RECOGNITION_CLASSES[] = {"jog","skip","stDown","stUp","stay","walk"};
#include "nnom.h"

/* Weights, bias and Q format */
#define TENSOR_CONV2D_8_KERNEL_0 {27, -43, 38, 24, 20, 19, 32, -17, 33, 7, -4, 0, -67, -4, 2, 9, 51, -11, 16, -15, 10, 32, -5, 51, 46, 37, 23, -48, -4, -21, -22, 24, -29, -37, -22, 32, 24, -24, 8, -53, 0, -82, 42, -35, 28, -10, 58, 36, -61, -3, 40, 33, 8, 9, -64, -3, 17, 11, -27, -10, -39, 7, 12, 3, 3, 4, -28, -17, -19, 7, 44, 16, -31, 9, -9, -16, 13, -31, 25, 31, -7, 36, -53, -15, 49, -7, -22, -39, -39, -30, -32, -12, 9, 7, 48, 11, 33, -21, -13, 48, -23, 35, -4, 38, -20, 58, -56, 19, -39, -7, 23, -1, 47, -6, 21, -9, 28, -1, 52, 15, 3, 21, 21, 40, -1, -12, -10, -8, 1, -46, 31, -1, 42, 7, 18, 28, -21, -14, -25, 33, 11, -10, -45, -49, -26, 59, -17, 26, -9, -12, 37, -21, 17, -24, -34, 45, -19, 24, 39, -57, 5, -8, -6, 17, 5, -17, 19, -20, -45, -11, 29, -22, 11, -5, -29, 19, -7, 8, 47, -10, 37, 38, 32, -30, -35, -36, 36, 17, 11, -26, 22, -36, 9, -4, 10, 10, 6, 14, 36, -13, -31, -43, -40, 28, -10, 33, -59, 31, -17, 11, 44, 9, 42, 27, 66, -19, -27, -51, -38, 17, 13, 51, 16, 10, -10, -18, -31, -37, -17, 48, 30, -14, -7, -37, 26, 5, -47, -28, 23, -13, 7, 56, 19, 41, 5, 38, 21, 12, 0, 15, 9, -68, 25, 17, -38, -4, 48, -33, -33, 31, 13, -11, 7, 10, 20, -27, 43, -9, 27, -7, 22, -3, -15, 20, -26, 35, -62, 8, 38, -24, -22, -17, 3, 28, 20, 30, -36, 3, 43, -14, 34, -18, -5, -34, -42, -2, 18, -16, 37, -17, -2, -47, 12, -43, -24, -30, -19, -28, 14, -39, -49, 9, 11, -22, 2, 28, 12, 19, 13, -45, -17, 64, 42, 7, -61, -11, -29, -9, -61, -7, -26, 4, -44, -2, 4, 55, -26, -4, 42, -30, -15, -6, -17, -11, -22, -1, 42, 14, 16, 7, -59, 10, -33, 3, 5, -16, 10, -21, -57, 41, -41, 42, -2, -10, 30, -38, 37, -3, -7, -3, 34, -31, 22, 59, -6, 39, 11, -43, -26, 8, 1, 8, -8, 24}

#define TENSOR_CONV2D_8_KERNEL_0_DEC_BITS {6}

#define TENSOR_CONV2D_8_BIAS_0 {-21, 8, -41, -21, -72, -86, 7, -83, -51, -46, -44, -42, -1, -46, -112, -39, -36, -88, -43, -66, -26, -26, 12, -34, -106, -29, -59, -35, -105, -79, -39, -27}

#define TENSOR_CONV2D_8_BIAS_0_DEC_BITS {9}

#define CONV2D_8_BIAS_LSHIFT {6}

#define CONV2D_8_OUTPUT_RSHIFT {9}

#define TENSOR_CONV2D_9_KERNEL_0 {}

#define TENSOR_CONV2D_9_KERNEL_0_DEC_BITS {6}

#define TENSOR_CONV2D_9_BIAS_0 {26, -11, -12, -6, 24, -17, 19, 4, 7, -4, 7, 60, -62, -13, -69, -45, -61, -42, -15, 31}

#define TENSOR_CONV2D_9_BIAS_0_DEC_BITS {7}

#define CONV2D_9_BIAS_LSHIFT {5}

#define CONV2D_9_OUTPUT_RSHIFT {8}

#define TENSOR_CONV2D_10_KERNEL_0 {-43, -65, 35, 6, 10, 38, 6, -4, -3, -21, -9, 17, -2, 22, 2, 42, 9, -5, 50, -36, 28, 15, -7, -1, -31, -2, 62, 2, 52, 10, 19, -3, 28, 42, 15, -25, 21, 23, -7, 23, 36, -1, -2, -18, 9, 8, -11, 15, 8, -8, -23, -19, -28, 10, 0, 25, 36, 3, 11, 13, 7, 5, -65, 17, -2, 10, -48, -2, 0, -35, -59, -61, -29, -5, -10, -30, 3, 4, 2, -31, 6, 18, 18, 15, -46, 3, 50, 25, 44, -20, -59, -26, 8, -10, 18, 19, -44, -25, 37, 23, 93, -53, 12, -3, -65, 24, -16, 36, 0, 83, -5, 16, -22, 16, 29, 5, -1, -10, 55, 7, 16, 52, -16, 13, -32, -20, 9, 23, 9, -22, 31, -57, 15, 13, 20, 41, 7, 14, 14, -19, -13, 76, 13, -19, -16, 13, -19, 2, -8, 28, 43, 4, 28, -35, 30, 46, 16, 7, -26, 12, 4, 18, -9, -18, 2, 12, 10, 6, 19, -24, 52, -13, 21, 2, -39, -1, -5, 28, 34, -8, -12, 39, 24, 0, -8, 2, 41, 5, 34, -17, 24, -40, 1, -14, -2, 32, 17, -4, -10, 18, -7, 29, -18, 6, 29, -65, 27, 19, 4, 41, 37, 1, -41, -19, 3, -20, -24, -17, -12, 18, -26, -21, -31, 16, -45, 34, -26, 15, 4, -4, 1, -28, 10, 27, 11, 44, -42, 0, 56, 24, 18, 37, -7, -13, -54, 16, -24, 41, 33, 16, 3, -27, 11, 34, 8, 36, 50, 29, 11, -16, 0, -24, 19, 1, -51, 5, -39, 24, 48, -37, -23, -34, 1, 0, -19, 42, -11, -25, 21, -36, -1, -31, 24, -10, -23, 16, 38, 5, -30, 4, 28, -27, 28, -17, 37, -15, 14, 28, 11, 5, -100, -37, 27, -3, 7, 7, 29, -30, -14, -34, 2, -6, 23, 20, 11, 48, 10, 22, 8, -6, -2, 21, 23, 12, -2, 24, -57, -30, -31, -35, 7, 10, -50, -12, -52, 23, -1, -1, 9, -34, -42, 39, -26, -13, -31, -19, 38, -16, 19, 7, 15, 0, -1, 8, 19, 32, -8, 2, -40, -8, -30, -5, 43, -11, 14, 3, -4, 25, -13, 41, 70, 38, 25, -50, 48, -18, -21, -7, 4, 29, -43, 6, 31, 10, 23, 51, -18, -7, 14, 9, 21, -14, 18, 9, -6, 13, -2, 24, 7, 6, -8, -10, 34, 15, -6, -26, 5, 27, -16, 5, -49, -16, -17, 18, -10, -27, 18, 15, 31, -38, -45, -42, 39, -13, 8, 26, -107, -22, -33, -44, -9, 0, 22, -22, 39, -12, 20, 14, -22, -4, -39, 4, -16, -4, -2, 23, -45, -5, 16, -13, 9, -6, 38, 18, 51, 41, 14, 11, 22, -40, -6, 47, 27, 0, 1, -7, 5, 11, 1, -12, -20, -22, -14, 11, -26, 16, 27, 29, -8, -20, -26, -85, 6, 13, -8, 10, -50, -13, -8, 4, 24, 15, 35, -47, 68, 10, 1, 12, -40, -23, -14, 14, 15, 11, 18, -11, -9, -28, 10, -22, -40, -65, 14, 31, -3, 49, 18, 28, -1, -84, -12, -19, 21, 10, 25, 28, 3, -50, -6, -30, 12, 22, 19, 5, -16, 10, -44, 10, 7, -4, 12, 30, -14, 8, -19, -54, 75, -45, 35, 21, 7, 9, -32, 33, -41, -3, -13, -9, -32, 34, -11, 18, -55, 4, -120, 3, 50, 5, 9, 32, 40, -27, -7, 24, 7, -35, -28, -21, -7, 17, -9, 19, -1, 19, -72, 14, -15, 16, 2, -27, 3, -17, -11, -66, -4, 33, -27, -27, -25, 20, 2, 60, 28, 5, -29, 4, -11, 38, 21, 4, 20, -26, -6, -15, 8, 10, 7, 18, 32, 0, -29, 49, -14, 10, -11, 36, -14, -7, -1, 9, 62, -30, 29, -18, 45, 11, 11, 0, 8, 33}

#define TENSOR_CONV2D_10_KERNEL_0_DEC_BITS {6}

#define TENSOR_CONV2D_10_BIAS_0 {23, -31, 18, -58, -30, 1, -64, -33, 20, 22, -34, -61, -76, 2, 26, -45}

#define TENSOR_CONV2D_10_BIAS_0_DEC_BITS {7}

#define CONV2D_10_BIAS_LSHIFT {3}

#define CONV2D_10_OUTPUT_RSHIFT {7}

#define TENSOR_CONV2D_11_KERNEL_0 {-11, -29, -74, -77, -13, -64, -59, 21, 38, 27, -34, 13, 57, 49, 4, -52, 10, 1, -29, -41, 23, -80, -5, -12, 30, -37, 32, 1, -4, 13, -4, -30, -106, -8, -21, -40, -51, 4, -12, -62, -33, -6, -77, -66, -54, -108, 25, -62, 34, -24, -31, -42, 56, -11, -38, -77, -8, -13, -39, -68, -42, 49, -27, -56, 1, -4, -2, 11, 15, 0, 25, 20, -32, -11, 25, 21, 28, 23, -34, -12, 8, -29, 27, 27, 21, 13, -50, -52, 28, -32, -54, 1, 17, 22, -46, 13, 30, -17, -16, 2, -4, -36, -18, -2, 10, -35, -10, -2, 7, 25, -3, 17, -46, -13, -14, 15, 13, 23, -8, -4, 2, -2, 13, -23, -5, 10, 40, 14, 12, 12, -21, 7, 1, 16, -14, 0, -16, -7, 28, -27, -15, -38, -19, 9, -4, 24, -53, -46, -30, -5, -36, 11, 4, 8, -14, 19, 27, 1, -38, -13, 24, -17, 44, -58, -17, 14, -34, -22, 37, -63, 21, -16, 15, -54, 37, -21, -64, -12, -66, -91, -23, -60, -31, -64, -43, -3, -53, -20, -30, -19, -23, -62, -15, 18, -42, 28, 1, 4, 35, 8, -53, -8, 8, 26, 28, 19, -3, -25, 13, 12, 40, 33, -32, 21, -39, -54, -9, -17, -70, 15, -7, 17, -43, 21, 14, -5, -46, 9, -7, -39, -40, 6, 33, 6, 22, -50, -62, 42, -7, 16, 9, -19, -63, -64, 3, -53, -94, 26, 35, -16, -9, 11, 40, 13, 5, -60, 19, 33, -55, 22, 8, -55, 18, -25, 54, -1, 18, -42, -2, 49, -67, -44, -20, -2, 13, -11, -27, 23, -14, -39, -32, -51, 10, 32, 19, -18, 23, -22, -48, 49, 0, 18, 12, 29, 5, 17, 41, -11, 5, -17, -31, -2, 45, -5, 11, -10, -20, 8, 18, -34, -3, 7, 19, -4, 5, 1, 9, 27, -3, -5, 24, -31, 29, -63, 33, -21, -45, -33, -21, -71, 4, -85, -19, -52, 37, -46, -26, -5, 36, -66, -73, -39, -73, -56, -13, -26, -1, -67, 1, -75, -3, -57, 22, 18, 15, 4, -26, 8, 1, -8, 33, -55, 10, 3, -44, -2, 14, -19, -34, -26, 34, -21, -16, -20, -22, -28, -41, -39, 12, 32, -14, -26, -27, -24}

#define TENSOR_CONV2D_11_KERNEL_0_DEC_BITS {6}

#define TENSOR_CONV2D_11_BIAS_0 {-79, 61, -84, -92, -74, 53, -56, -84, 23, -106, -19, 66}

#define TENSOR_CONV2D_11_BIAS_0_DEC_BITS {8}

#define CONV2D_11_BIAS_LSHIFT {1}

#define CONV2D_11_OUTPUT_RSHIFT {8}

#define TENSOR_DENSE_2_KERNEL_0 {-11, 10, 0, -4, 5, 2, -9, -43, -42, -43, 16, 5, 13, 4, 12, -19, -12, 8, 13, 9, -16, -31, -2, -14, -46, -47, -13, 14, 5, 3, 7, 5, -48, -3, -32, -34, 17, 11, 16, 14, 15, 8, -46, -6, 8, -37, 6, 6, -85, -121, -49, -38, -56, -82, -52, -77, -94, -34, -65, -69, -42, 1, -12, -30, -36, 11, 5, -49, 4, -40, 23, 13}

#define TENSOR_DENSE_2_KERNEL_0_DEC_BITS {5}

#define TENSOR_DENSE_2_BIAS_0 {-10, -5, -50, -1, 84, -3}

#define TENSOR_DENSE_2_BIAS_0_DEC_BITS {5}

#define DENSE_2_BIAS_LSHIFT {1}

#define DENSE_2_OUTPUT_RSHIFT {6}


/* output q format for each layer */
#define CONV2D_8_INPUT_OUTPUT_DEC 9
#define CONV2D_8_INPUT_OUTPUT_OFFSET 0
#define CONV2D_8_OUTPUT_DEC 6
#define CONV2D_8_OUTPUT_OFFSET 0
#define RE_LU_8_OUTPUT_DEC 6
#define RE_LU_8_OUTPUT_OFFSET 0
#define CONV2D_9_OUTPUT_DEC 4
#define CONV2D_9_OUTPUT_OFFSET 0
#define RE_LU_9_OUTPUT_DEC 4
#define RE_LU_9_OUTPUT_OFFSET 0
#define CONV2D_10_OUTPUT_DEC 3
#define CONV2D_10_OUTPUT_OFFSET 0
#define RE_LU_10_OUTPUT_DEC 3
#define RE_LU_10_OUTPUT_OFFSET 0
#define CONV2D_11_OUTPUT_DEC 1
#define CONV2D_11_OUTPUT_OFFSET 0
#define RE_LU_11_OUTPUT_DEC 1
#define RE_LU_11_OUTPUT_OFFSET 0
#define GLOBAL_MAX_POOLING2D_2_OUTPUT_DEC 1
#define GLOBAL_MAX_POOLING2D_2_OUTPUT_OFFSET 0
#define FLATTEN_2_OUTPUT_DEC 1
#define FLATTEN_2_OUTPUT_OFFSET 0
#define DROPOUT_2_OUTPUT_DEC 1
#define DROPOUT_2_OUTPUT_OFFSET 0
#define DENSE_2_OUTPUT_DEC 0
#define DENSE_2_OUTPUT_OFFSET 0
#define SOFTMAX_2_OUTPUT_DEC 7
#define SOFTMAX_2_OUTPUT_OFFSET 0

/* bias shift and output shift for none-weighted layer */

/* tensors and configurations for each layer */
static int8_t nnom_input_data[192] = {0};

const nnom_shape_data_t tensor_Placeholder_0_dim[] = {64, 3, 1};
const nnom_qformat_param_t tensor_Placeholder_0_dec[] = {9};
const nnom_qformat_param_t tensor_Placeholder_0_offset[] = {0};
const nnom_tensor_t tensor_Placeholder_0 = {
    .p_data = (void*)nnom_input_data,
    .dim = (nnom_shape_data_t*)tensor_Placeholder_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_Placeholder_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_Placeholder_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 3,
    .bitwidth = 8
};

const nnom_io_config_t conv2d_8_input_config = {
    .super = {.name = "conv2d_8_input"},
    .tensor = (nnom_tensor_t*)&tensor_Placeholder_0
};
const int8_t tensor_conv2d_8_kernel_0_data[] = TENSOR_CONV2D_8_KERNEL_0;

const nnom_shape_data_t tensor_conv2d_8_kernel_0_dim[] = {6, 2, 1, 32};
const nnom_qformat_param_t tensor_conv2d_8_kernel_0_dec[] = TENSOR_CONV2D_8_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv2d_8_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_conv2d_8_kernel_0 = {
    .p_data = (void*)tensor_conv2d_8_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv2d_8_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv2d_8_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv2d_8_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 4,
    .bitwidth = 8
};
const int8_t tensor_conv2d_8_bias_0_data[] = TENSOR_CONV2D_8_BIAS_0;

const nnom_shape_data_t tensor_conv2d_8_bias_0_dim[] = {32};
const nnom_qformat_param_t tensor_conv2d_8_bias_0_dec[] = TENSOR_CONV2D_8_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv2d_8_bias_0_offset[] = {0};
const nnom_tensor_t tensor_conv2d_8_bias_0 = {
    .p_data = (void*)tensor_conv2d_8_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv2d_8_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv2d_8_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv2d_8_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t conv2d_8_output_shift[] = CONV2D_8_OUTPUT_RSHIFT;
const nnom_qformat_param_t conv2d_8_bias_shift[] = CONV2D_8_BIAS_LSHIFT;
const nnom_conv2d_config_t conv2d_8_config = {
    .super = {.name = "conv2d_8"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_conv2d_8_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_conv2d_8_bias_0,
    .output_shift = (nnom_qformat_param_t *)&conv2d_8_output_shift, 
    .bias_shift = (nnom_qformat_param_t *)&conv2d_8_bias_shift, 
    .filter_size = 32,
    .kernel_size = {6, 2},
    .stride_size = {1, 1},
    .padding_size = {0, 0},
    .dilation_size = {1, 1},
    .padding_type = PADDING_VALID
};
const int8_t tensor_conv2d_9_kernel_0_data[] = TENSOR_CONV2D_9_KERNEL_0;

const nnom_shape_data_t tensor_conv2d_9_kernel_0_dim[] = {4, 2, 32, 20};
const nnom_qformat_param_t tensor_conv2d_9_kernel_0_dec[] = TENSOR_CONV2D_9_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv2d_9_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_conv2d_9_kernel_0 = {
    .p_data = (void*)tensor_conv2d_9_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv2d_9_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv2d_9_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv2d_9_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 4,
    .bitwidth = 8
};
const int8_t tensor_conv2d_9_bias_0_data[] = TENSOR_CONV2D_9_BIAS_0;

const nnom_shape_data_t tensor_conv2d_9_bias_0_dim[] = {20};
const nnom_qformat_param_t tensor_conv2d_9_bias_0_dec[] = TENSOR_CONV2D_9_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv2d_9_bias_0_offset[] = {0};
const nnom_tensor_t tensor_conv2d_9_bias_0 = {
    .p_data = (void*)tensor_conv2d_9_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv2d_9_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv2d_9_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv2d_9_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t conv2d_9_output_shift[] = CONV2D_9_OUTPUT_RSHIFT;
const nnom_qformat_param_t conv2d_9_bias_shift[] = CONV2D_9_BIAS_LSHIFT;
const nnom_conv2d_config_t conv2d_9_config = {
    .super = {.name = "conv2d_9"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_conv2d_9_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_conv2d_9_bias_0,
    .output_shift = (nnom_qformat_param_t *)&conv2d_9_output_shift, 
    .bias_shift = (nnom_qformat_param_t *)&conv2d_9_bias_shift, 
    .filter_size = 20,
    .kernel_size = {4, 2},
    .stride_size = {1, 1},
    .padding_size = {0, 0},
    .dilation_size = {1, 1},
    .padding_type = PADDING_VALID
};
const int8_t tensor_conv2d_10_kernel_0_data[] = TENSOR_CONV2D_10_KERNEL_0;

const nnom_shape_data_t tensor_conv2d_10_kernel_0_dim[] = {2, 1, 20, 16};
const nnom_qformat_param_t tensor_conv2d_10_kernel_0_dec[] = TENSOR_CONV2D_10_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv2d_10_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_conv2d_10_kernel_0 = {
    .p_data = (void*)tensor_conv2d_10_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv2d_10_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv2d_10_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv2d_10_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 4,
    .bitwidth = 8
};
const int8_t tensor_conv2d_10_bias_0_data[] = TENSOR_CONV2D_10_BIAS_0;

const nnom_shape_data_t tensor_conv2d_10_bias_0_dim[] = {16};
const nnom_qformat_param_t tensor_conv2d_10_bias_0_dec[] = TENSOR_CONV2D_10_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv2d_10_bias_0_offset[] = {0};
const nnom_tensor_t tensor_conv2d_10_bias_0 = {
    .p_data = (void*)tensor_conv2d_10_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv2d_10_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv2d_10_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv2d_10_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t conv2d_10_output_shift[] = CONV2D_10_OUTPUT_RSHIFT;
const nnom_qformat_param_t conv2d_10_bias_shift[] = CONV2D_10_BIAS_LSHIFT;
const nnom_conv2d_config_t conv2d_10_config = {
    .super = {.name = "conv2d_10"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_conv2d_10_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_conv2d_10_bias_0,
    .output_shift = (nnom_qformat_param_t *)&conv2d_10_output_shift, 
    .bias_shift = (nnom_qformat_param_t *)&conv2d_10_bias_shift, 
    .filter_size = 16,
    .kernel_size = {2, 1},
    .stride_size = {1, 1},
    .padding_size = {0, 0},
    .dilation_size = {1, 1},
    .padding_type = PADDING_VALID
};
const int8_t tensor_conv2d_11_kernel_0_data[] = TENSOR_CONV2D_11_KERNEL_0;

const nnom_shape_data_t tensor_conv2d_11_kernel_0_dim[] = {2, 1, 16, 12};
const nnom_qformat_param_t tensor_conv2d_11_kernel_0_dec[] = TENSOR_CONV2D_11_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv2d_11_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_conv2d_11_kernel_0 = {
    .p_data = (void*)tensor_conv2d_11_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv2d_11_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv2d_11_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv2d_11_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 4,
    .bitwidth = 8
};
const int8_t tensor_conv2d_11_bias_0_data[] = TENSOR_CONV2D_11_BIAS_0;

const nnom_shape_data_t tensor_conv2d_11_bias_0_dim[] = {12};
const nnom_qformat_param_t tensor_conv2d_11_bias_0_dec[] = TENSOR_CONV2D_11_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv2d_11_bias_0_offset[] = {0};
const nnom_tensor_t tensor_conv2d_11_bias_0 = {
    .p_data = (void*)tensor_conv2d_11_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv2d_11_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv2d_11_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv2d_11_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t conv2d_11_output_shift[] = CONV2D_11_OUTPUT_RSHIFT;
const nnom_qformat_param_t conv2d_11_bias_shift[] = CONV2D_11_BIAS_LSHIFT;
const nnom_conv2d_config_t conv2d_11_config = {
    .super = {.name = "conv2d_11"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_conv2d_11_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_conv2d_11_bias_0,
    .output_shift = (nnom_qformat_param_t *)&conv2d_11_output_shift, 
    .bias_shift = (nnom_qformat_param_t *)&conv2d_11_bias_shift, 
    .filter_size = 12,
    .kernel_size = {2, 1},
    .stride_size = {1, 1},
    .padding_size = {0, 0},
    .dilation_size = {1, 1},
    .padding_type = PADDING_VALID
};

const nnom_global_pool_config_t global_max_pooling2d_2_config = {
    .super = {.name = "global_max_pooling2d_2"},
    .output_shift = 0,
};

const nnom_flatten_config_t flatten_2_config = {
    .super = {.name = "flatten_2"}
};
const int8_t tensor_dense_2_kernel_0_data[] = TENSOR_DENSE_2_KERNEL_0;

const nnom_shape_data_t tensor_dense_2_kernel_0_dim[] = {12, 6};
const nnom_qformat_param_t tensor_dense_2_kernel_0_dec[] = TENSOR_DENSE_2_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_dense_2_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_dense_2_kernel_0 = {
    .p_data = (void*)tensor_dense_2_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_dense_2_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_dense_2_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_dense_2_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 2,
    .bitwidth = 8
};
const int8_t tensor_dense_2_bias_0_data[] = TENSOR_DENSE_2_BIAS_0;

const nnom_shape_data_t tensor_dense_2_bias_0_dim[] = {6};
const nnom_qformat_param_t tensor_dense_2_bias_0_dec[] = TENSOR_DENSE_2_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_dense_2_bias_0_offset[] = {0};
const nnom_tensor_t tensor_dense_2_bias_0 = {
    .p_data = (void*)tensor_dense_2_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_dense_2_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_dense_2_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_dense_2_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t dense_2_output_shift[] = DENSE_2_OUTPUT_RSHIFT;
const nnom_qformat_param_t dense_2_bias_shift[] = DENSE_2_BIAS_LSHIFT;
const nnom_dense_config_t dense_2_config = {
    .super = {.name = "dense_2"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_dense_2_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_dense_2_bias_0,
    .output_shift = (nnom_qformat_param_t *)&dense_2_output_shift,
    .bias_shift = (nnom_qformat_param_t *)&dense_2_bias_shift
};

const nnom_softmax_config_t softmax_2_config = {
    .super = {.name = "softmax_2"}
};
static int8_t nnom_output_data[6] = {0};

const nnom_shape_data_t tensor_output0_dim[] = {6};
const nnom_qformat_param_t tensor_output0_dec[] = {SOFTMAX_2_OUTPUT_DEC};
const nnom_qformat_param_t tensor_output0_offset[] = {0};
const nnom_tensor_t tensor_output0 = {
    .p_data = (void*)nnom_output_data,
    .dim = (nnom_shape_data_t*)tensor_output0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_output0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_output0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_io_config_t output0_config = {
    .super = {.name = "output0"},
    .tensor = (nnom_tensor_t*)&tensor_output0
};
/* model version */
#define NNOM_MODEL_VERSION (10000*0 + 100*4 + 3)

/* nnom model */
static nnom_model_t* nnom_model_create(nnom_status_t *state)
{
	static nnom_model_t model;
	nnom_layer_t* layer[14];

	check_model_version(NNOM_MODEL_VERSION);
	new_model(&model);

	layer[0] = input_s(&conv2d_8_input_config);
	layer[1] = model.hook(conv2d_s(&conv2d_8_config), layer[0]);
	layer[2] = model.active(act_relu(), layer[1]);
	layer[3] = model.hook(conv2d_s(&conv2d_9_config), layer[2]);
	layer[4] = model.active(act_relu(), layer[3]);
	layer[5] = model.hook(conv2d_s(&conv2d_10_config), layer[4]);
	layer[6] = model.active(act_relu(), layer[5]);
	layer[7] = model.hook(conv2d_s(&conv2d_11_config), layer[6]);
	layer[8] = model.active(act_relu(), layer[7]);
	layer[9] = model.hook(global_maxpool_s(&global_max_pooling2d_2_config), layer[8]);
	layer[10] = model.hook(flatten_s(&flatten_2_config), layer[9]);
	layer[11] = model.hook(dense_s(&dense_2_config), layer[10]);
	layer[12] = model.hook(softmax_s(&softmax_2_config), layer[11]);
	layer[13] = model.hook(output_s(&output0_config), layer[12]);
	*state = model_compile(&model, layer[0], layer[13]);
	return &model;
}
#endif // INCLUDE_MODEL

#endif //MODEL_26_NNOM_H