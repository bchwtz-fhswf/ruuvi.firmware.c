#ifndef MODEL_35_NNOM_H
#define MODEL_35_NNOM_H

#define APP_ACTIVITY_MODEL_NAME model_35_nnom
#define APP_ACTIVITY_RECOGNITION_PRECISION_FLOAT (0)
#define APP_ACTIVITY_RECOGNITION_SENSOR_SCALE (2)
#define APP_ACTIVITY_RECOGNITION_SENSOR_RESOLUTION (8)
#define APP_ACTIVITY_RECOGNITION_SAMPLING_FREQUENCY (10)
#define APP_ACTIVITY_RECOGNITION_FREQUENCY_DIVIDER (0)
#define APP_ACTIVITY_RECOGNITION_HIGHPASS_STAGES (2)
#define APP_ACTIVITY_RECOGNITION_INPUT_SIZE (192)
#define APP_ACTIVITY_RECOGNITION_STEP_SIZE (32)
#define APP_ACTIVITY_RECOGNITION_CLASS_COUNT (6)

#ifdef INCLUDE_MODEL
static const float highpass_coefficients[] = {0.2069928239055942f, -0.2069928239055942f, 0.0f, 0.2068179864931189f, -0.0f, 0.25f, -0.5f, 0.25f, 0.4490699651581907f, -0.2071676613180694f};
static const char* APP_ACTIVITY_RECOGNITION_CLASSES[] = {"jog","skip","stDown","stUp","stay","walk"};
#include "nnom.h"

/* Weights, bias and Q format */
#define TENSOR_CONV2D_4_KERNEL_0 {-57, -32, -8, 73, 25, 14, 31, -8, 6, 19, -11, 45, 43, 14, 22, 26, -25, 40, -59, 4, 55, 40, -19, 2, -26, 2, -49, -24, 45, 3, 52, 21, -36, 3, 27, 33, 53, 23, 14, -21, -10, -44, 2, -21, 33, 6, 54, -30, 50, -5, 33, -7, -16, 3, 30, 37, -35, 18, -68, 15, -7, -83, -10, -10, -3, 8, 19, 64, 9, 28, -10, -88, 32, 19, -44, -9, 28, -28, -48, 24, -21, -40, 45, -54, 37, -18, 18, -32, -6, -17, 13, 31, -2, -54, 0, 11, -7, 60, 34, -63, -48, 43, -33, -9, -40, -37, 29, 12, -45, 66, 28, -57, 36, -8, 31, -18, -1, 32, -3, -18, 40, -3, 59, 47, -19, 10, -67, 5, 12, -16, 11, -30, 3, -20, -16, 30, -2, 7, 35, -29, 35, -20, -45, -69, -57, 31, 46, 9, 59, 22, -9, 11, 21, -15, -1, 47, 86, -1, 8, 4, 14, 2, -5, -2, 19, 6, 57, 0, -51, -36, -47, -32, -6, 28, 42, 47, 32, 20, 36, 20, -47, 31, -17, -18, 23, 6, 6, -32, 27, -2, 25, -58, -2, -57, 12, -16, 10, 8, -2, 32, -23, 44, -27, -24, 24, -14, 5, 25, 1, 50, 25, 17, 5, 54, 25, 65, -5, 80, -33, -49, 18, -23, -6, 46, -12, 16, 10, 34, -55, 16, -6, 4, 16, 6, -23, 13, 51, 2, 92, -16, -1, -65, -22, -45, -38, -9, 9, -24, -29, -29, -57, 21, 37, -29, 42, -8, 52, -16, 68, 31, 42, 4, 55, -17, 22, -2, 11, 36, -21, 12, 4, 5, 25, -34, 48, -46, 58, 36, 58, -39, -56, -37, 11, 42, 25, 16, -17, -22, -13, 85, -8, 13, 6, -64, 25, -25, 41, -44, 3, -55, 22, -16, 9, 20, 39, -13, -50, -2, -5, 1, -76, -24, 53, 60, -26, -39, -22, 9, 18, -65, -23, -12, 27, 36, 30, -25, 36, 6, 8, 10, 6, 5, -23, 18, -52, 77, 43, 26, 49, 43, 18, 8, -25, 8, -59, -40, -48, -16, -10, 47, -15, 8, -29, -34, 14, -23, -12, 23, -50, -5, -58, -11, -1, -8, 45, -4, -20, 2, -52, -16, -38, -29, -50, -6, -78, -11, -62, -19, -59, -14, -60, -21, -43, -11}

#define TENSOR_CONV2D_4_KERNEL_0_DEC_BITS {6}

#define TENSOR_CONV2D_4_BIAS_0 {-61, -91, -92, -77, -97, -37, -43, -1, -101, -107, -71, -67, -92, -2, -99, 8, -30, -31, -88, -120, -54, -50, -11, -80, -110, -41, -98, 4, -2, -24, -19, -16}

#define TENSOR_CONV2D_4_BIAS_0_DEC_BITS {9}

#define CONV2D_4_BIAS_LSHIFT {6}

#define CONV2D_4_OUTPUT_RSHIFT {8}

#define TENSOR_CONV2D_5_KERNEL_0 {13, -25, 5, -26, -6, 2, -28, -6, -20, -3, 12, 11, 5, -10, -1, 21, 3, -11, -37, 46, -26, -12, 11, -18, -8, 16, -22, -4, 17, 1, -13, 12, 18, 23, -16, 14, -3, 31, -33, 6, -13, 2, 9, 30, -1, 5, -2, 10, 16, 6, 14, 11, -3, -5, 1, -5, 20, 11, -19, 7, 2, 25, -6, -22, -26, -1, 14, -5, -7, -4, 12, -16, 5, -1, 2, 16, 11, -13, 15, 21, 2, 5, 13, 12, -13, 2, 9, 1, 6, -5, 5, 3, 9, 7, 1, 13, -19, -16, -4, -18, 0, -17, -20, 17, 8, 24, 6, -9, -3, 0, -13, 9, 11, -2, -6, -33, -12, -6, 10, 25, 2, -9, 7, 4, 17, -15, -3, -30, -5, 17, 9, -9, -6, -22, -15, -5, -32, 6, 6, -21, 2, 0, 10, 8, 2, 9, 9, 27, -24, 23, -14, 5, 16, 3, 10, 17, 6, -6, 17, 2, 1, 7, -13, -5, 25, 25, 13, 11, 16, 6, 0, -40, 7, 5, 6, -6, 20, 3, -10, -34, -17, 3, -10, -9, -5, -15, -7, -4, 13, -37, -21, -7, 2, 0, -15, -10, 15, -43, -2, -4, -25, 3, -3, -14, 7, -24, -39, -22, -17, 19, -5, -31, 12, -1, -36, 4, 23, 18, -3, 26, 35, 9, -8, 18, 1, -4, -44, -2, -20, 14, 14, 6, 1, -3, 15, -16, 5, 17, -3, -6, -34, -3, 12, -2, -17, 25, 13, 6, 10, 9, 15, -13, -5, 14, -8, -15, 2, -14, 4, 5, -1, 14, -19, 1, 10, -4, -5, -4, -18, -3, 3, -3, 1, -7, 10, 3, 8, 15, 2, -6, -19, -4, -18, 6, -11, -17, -7, 0, 8, -35, 23, -4, -28, -6, 9, -36, -13, -10, -42, -14, 0, -19, -7, -6, -31, 4, -3, -8, 2, -7, -9, -40, -5, 8, -25, -8, -16, -3, 12, -16, 3, 9, -14, -14, 2, -2, 10, -2, 6, -28, -12, -1, -9, -14, -12, -38, -4, 8, 14, 17, -4, 1, -15, 3, 0, 9, 8, 17, -8, 0, 0, 7, -34, 7, 1, -10, 28, 4, 4, 7, -6, -11, 1, -1, -1, 2, 4, 2, 7, -11, 4, -11, 24, -5, -2, -27, -13, -10, -18, -4, -17, -4, 10, 5, 2, 6, 35, 6, -21, 5, 8, -16, -6, 3, -10, 12, -12, -11, -3, -8, 2, -1, -6, 7, 24, 2, -3, 6, 0, -3, -16, -1, 0, 18, 2, 22, 9, -1, 1, -15, 15, 15, 19, 10, -18, 8, -1, -2, 10, 8, 1, -6, 4, 11, -35, -20, 21, 1, 10, 16, -1, 22, 7, 7, -5, 2, -9, -7, 18, 11, 8, -5, 6, 13, -4, 8, -5, -1, -1, 2, 14, -5, 26, 2, 6, -13, -9, 13, 25, 0, 6, 4, 4, -2, -13, -7, 2, 6, -7, 18, 0, 26, -2, 7, 18, 1, 14, -15, 36, -17, 21, 15, 29, -19, -15, 11, -12, 4, -2, -18, 3, -31, 0, 9, 9, 12, -18, 9, 11, 12, -8, 18, -3, -1, -4, -4, 1, -3, -1, 1, -3, 2, -2, 2, -1, -4, 3, 0, 0, 2, -2, 0, -4, -3, 1, 2, -4, 1, -3, -1, 0, 1, 1, -2, 1, 3, -1, -2, -2, -1, -2, -3, -3, 2, -1, -3, -4, -4, 3, -3, -1, -5, -1, 0, -3, -4, -4, -2, 2, -5, 0, 0, 0, 2, 0, 1, 1, -3, -3, 2, -1, 0, -4, -4, 2, -4, -3, 0, -4, -1, 0, 1, -3, -5, -1, -4, 4, 0, 2, -5, 1, -3, -3, 2, 2, 3, 0, 3, -1, -1, 1, -4, -3, 0, -3, -2, -1, -4, -1, 0, -4, -5, -4, -3, -2, 0, 0, 3, -3, -5, -4, -5, -3, -4, -4, -2, 1, 1, -3, -3, 1, -2, 0, 1, -2, -3, -2, -5, 0, -3, -1, 1, -3, -3, 0, -2, -1, -3, -1, 0, -3, 0, -4, -1, 2, -2, -1, -1, 0, -2, 0, -3, 0, 2, 0, -1, 2, -4, 1, -3, -2, -4, -2, -3, -2, -3, -2, 1, -1, -3, 0, -2, 2, 2, 1, 0, 3, -1, -3, -3, 1, 2, -2, -1, 1, -2, 1, 0, 2, -1, -5, -5, -3, -5, -3, -1, 3, -2, -1, 2, 2, -4, -2, -2, -3, 1, 0, -3, -4, -2, -2, -2, -3, -1, -5, 2, 1, -1, 2, -4, 0, 0, 0, -2, -4, -1, 3, -1, -2, 2, -3, -1, -3, -3, -2, 1, -5, -2, -2, -1, -1, -1, -2, 3, 2, -1, -2, -5, 3, 2, -4, -4, 13, 5, 19, -7, 14, 6, 11, 4, 4, -5, -4, -9, -6, 1, 3, 10, 4, 12, 4, -1, 0, 17, 17, 10, 13, -3, 0, -2, 4, -3, -13, 3, 13, 9, 23, -8, 15, 12, -12, 18, 7, -14, 11, -3, 17, -1, 21, -3, 8, 24, 10, -16, 10, 1, 14, -8, -2, 3, 3, -3, 12, -3, 7, 1, 22, -10, 21, -5, 14, 20, 10, -4, 3, 11, 9, 8, 1, -1, 1, 11, -1, 5, 6, 0, 2, 14, 17, -5, 13, 6, 4, -7, -4, 0, -2, 16, -4, 13, 6, -3, 14, 12, 6, -4, -16, 2, 11, 3, 16, 9, 16, -8, -6, 7, 6, -16, 34, 20, 8, 7, 5, 8, 1, -1, 8, -12, -4, 5, 14, -6, 19, 2, 35, 10, 11, 15, 14, -4, 3, 1, 7, -3, 27, 25, -2, 2, 4, -4, -13, 7, 11, 11, 9, 3, -4, 6, -12, -10, -2, 2, -7, -5, 5, -2, 5, -13, 3, 4, -19, 4, -2, 4, -2, 12, 0, -16, -8, -2, 3, -3, 20, 1, -2, 4, -8, 8, 3, -19, 8, 10, 2, 14, 6, 1, 8, 6, 1, 33, 9, 6, 1, 2, 17, 10, 8, 3, -11, 33, 10, 9, 5, 8, 11, -4, 25, -7, 7, 3, 7, -20, 9, 20, 9, 3, -1, 4, 6, -5, -12, 0, 2, 0, 13, 10, 23, -6, 7, 8, -18, 3, 13, -8, 7, -7, 38, -10, -9, -10, -4, 4, 5, -1, 14, -7, -1, 6, -8, -8, -15, -12, 12, 2, -23, 14, -5, -16, -2, -11, -3, -1, -15, 27, -5, -20, -15, 15, 17, -2, -27, 17, -26, -1, 13, -16, -11, 6, 7, -7, 27, 21, 12, -7, -21, -6, -4, 4, -8, 5, -4, 6, 1, -1, -21, -23, -11, -16, -2, 0, 14, 2, 27, -6, 1, 14, -10, -6, -15, 20, 17, -12, 0, -1, -10, 4, -27, -27, 8, -3, 2, 0, -7, -1, -6, 2, -9, 11, 6, 0, 7, 2, -23, 3, -22, -11, -3, 5, -9, 3, 1, -2, 0, 2, 26, 10, -8, 2, -6, 13, 7, -4, -5, 3, 1, 4, 18, 7, -13, -12, -13, 11, 8, 3, 5, 16, -29, 4, -11, -3, -7, 5, 15, 9, -47, -10, 6, -6, -4, 21, -4, -5, 15, 21, 25, 7, -3, 2, -5, -7, -14, 13, 16, 12, -4, -8, 14, 17, -14, 8, 14, 12, 3, 13, 1, 2, 22, 17, 5, 14, 17, 10, -3, -29, -7, -7, 8, -3, 5, 5, 10, 22, 17, 5, 10, -3, -14, 7, -10, -1, -13, -6, 10, 7, -7, -6, 8, 5, 33, 22, -25, 4, 15, -3, 4, 11, 10, 12, -8, 17, -33, 17, -10, 18, -6, 32, -15, 24, 0, 12, -4, 7, 12, -9, -39, 1, 7, -16, -8, 20, -15, -11, -7, 9, -10, 0, 22, -11, 11, -4, 28, 1, -14, 13, 11, 1, -5, -14, 4, 2, 7, -4, -9, -9, 18, 2, -7, 14, 13, 9, 0, 4, 2, -2, 0, -1, 3, -3, -5, -3, 3, 0, -1, -2, -5, -2, -5, -1, -3, 2, 2, -2, -2, 2, -2, -3, 0, -3, 2, 0, 0, -4, 1, -3, -4, 1, 1, 1, -3, -1, 2, -2, -4, -2, 3, -3, 2, -3, -6, -2, -1, 3, 0, -2, -1, 1, -4, -5, 2, -4, 0, -3, -4, 0, 1, 1, 2, 0, -5, -5, 0, -5, -5, -2, -5, 0, 2, 1, -1, -5, -1, 1, -2, -4, -3, -2, 3, -2, -2, 2, 2, -2, 1, -1, 1, -3, 0, 2, 2, -2, 0, -6, 1, -4, -2, 0, -3, 2, 0, -1, -2, -1, 0, 2, -2, 1, 2, -1, -1, -2, -5, -6, -3, 0, 0, 2, -2, -6, -3, -3, 0, -1, 1, -3, -3, 0, -4, 0, -4, -1, -4, 0, -1, -2, -5, -5, -1, 0, -3, -2, -4, 0, -3, -3, 0, 1, -3, -4, 1, 3, -2, -3, 1, 1, -2, 3, 1, -4, -1, -4, 0, -5, -5, -2, -3, -2, 0, -5, -3, -4, -4, -4, 0, -7, -5, -1, -5, -1, -1, 2, 1, -1, 2, -5, -4, 0, -3, -4, -1, 0, -4, -1, 0, -2, 1, -2, -1, 0, -1, -6, 2, -2, -2, -1, 3, 2, -2, 0, 1, -4, 2, 0, -1, -2, 2, 0, -1, 2, -5, 4, 5, -1, -4, -1, -1, -3, 1, -5, -1, 0, 0, -5, -3, 2, -4, -1, -1, 2, 1, 2, 0, -5, -1, -2, 1, -2, -4, -11, -1, 7, 11, -27, 23, -10, -7, -8, -26, -25, -16, 0, 16, -8, -2, 12, -13, -48, -23, -22, -9, -7, -13, 3, 11, 3, 0, 12, 13, 6, -35, -10, -19, 4, -29, -29, 16, -1, -21, 7, 12, -6, -10, 5, -24, -1, -43, 3, -7, -37, 16, 3, 5, 2, -13, -22, -12, -8, 0, 7, -27, -26, -14, -15, -25, -3, -3, 9, -22, -1, 7, -8, 0, -7, -12, -26, -11, -19, -2, -5, -23, 1, 4, -10, 12, 4, -43, 2, -5, 0, 15, 7, -6, -14, 18, -30, -6, -3, -1, -17, 10, 10, 2, 8, -3, 5, 19, 9, -11, -9, 8, 23, -5, -7, -30, -11, 3, 17, -3, -13, -19, 7, -9, -8, 6, 6, -32, -18, 6, 5, -35, 6, -17, 5, -6, 2, 7, -9, 8, 0, -9, 0, 6, -3, -12, -27, -22, -2, 14, -12, 21, -8, 7, -5, 6, -8, -2, 9, 7, -8, -15, -28, 13, 6, -42, -1, -14, -2, -29, 2, -5, -1, -23, -2, 9, 14, 20, 4, 15, -9, -12, -18, -20, -6, -12, 13, -3, -4, 1, 3, 2, -7, 12, 3, -16, 8, 2, 1, -5, -45, 0, -5, 4, 8, 5, 1, 15, 1, -5, -58, -18, 7, 7, -4, -1, 29, -7, -1, 3, -6, 20, -22, 10, 23, -41, -13, -28, 14, -17, -1, -22, 11, 12, -5, -21, -5, -21, 4, -4, 7, -12, 3, 7, -10, 19, -30, -29, 6, 13, 9, 8, 5, 2, -5, 0, 1, 1, 3, -3, -1, -2, -5, 3, 0, -1, -2, -2, -4, -4, 1, -2, -2, -3, -2, 2, -4, 3, 2, -2, 3, 0, -5, 0, -1, -4, 0, 2, -1, 0, 3, 1, -4, 0, 1, 2, -4, -3, -4, -3, -4, 2, -1, 2, -4, -3, 1, -2, -1, 0, -2, 0, -2, 0, -2, -2, 0, -2, 2, -3, 2, 0, 0, 4, 1, 0, -5, -1, 1, -3, -5, -3, 1, 1, 0, -5, -4, 1, -4, -3, -5, 1, -2, 0, 0, 0, -1, -3, -1, -2, 2, -1, 1, 2, -5, 2, 1, 2, -4, 2, -4, 2, -2, 0, -1, 0, -1, -4, -2, -3, 1, 3, -2, 0, -2, -4, -3, 2, 0, -2, 1, 1, 3, 0, -2, 3, 0, -1, 1, 2, 0, 2, 2, 2, -1, -4, 0, -3, 0, 1, 3, 0, -1, -2, -4, -5, -2, -2, -2, 0, 3, 0, -1, -3, 1, -1, 2, 2, -2, -5, -3, 3, -4, -2, -3, -2, -5, -3, 2, 1, -1, -2, -2, 1, 0, -3, -3, -2, 3, -2, -1, -2, 0, 1, 0, 2, 0, -2, 1, 0, -2, 2, 1, 2, -3, -4, -3, 0, 1, 1, -3, 0, 0, -3, -5, -5, -2, -1, -2, 2, 3, -2, -6, 0, -4, 0, -1, -2, 1, 0, -3, 1, 1, 3, -1, -2, -2, -1, 0, 2, -3, -2, 0, -2, -5, -3, -3, -3, 2, -1, 0, 3, -1, -2, 1, 3, -3, -3, 1, -1, -5, -1, 3, -2, -2, -4, -3, -2, 0, -2, 1, 1, -5, -3, -4, -2, 1, 2, -4, -3, 2, -2, -1, -2, 0, -1, -4, -1, -1, -3, -4, 2, -4, -2, -3, -3, -1, -1, 0, -3, 1, 2, 3, 2, 0, 1, 3, -1, -2, 2, -4, -4, 3, -2, 3, -2, 4, -4, -4, -4, 0, 1, 0, 1, -3, 3, 0, -3, -1, 0, -2, -1, 0, -2, -4, -3, 0, 2, 0, -3, -1, 2, -1, -4, 0, 1, -3, -2, -4, -4, -4, -4, 0, 1, -5, 0, -2, -2, 1, 3, 3, -2, -2, -6, 1, -3, -2, -1, 3, 0, -3, -3, -2, -3, 1, -2, -3, 2, -1, 3, -3, 1, -3, -2, 1, 1, 0, -2, -5, -4, -4, 2, -4, -3, -3, 0, -1, 3, 2, 0, 0, 1, 1, 0, -3, 0, -3, 0, -2, 1, -3, 1, 0, -2, -1, -1, 0, -2, -5, -2, 1, 2, 0, -2, -5, -1, -2, -1, -6, 1, 0, 0, 3, 3, -3, -2, -6, -3, -4, -1, -5, -1, -4, 0, -5, -2, 1, -3, 2, 3, 0, 3, -3, -1, -1, 3, 2, -4, 1, 2, -1, -3, -4, -3, 0, -1, -1, -1, 1, 1, 1, -3, 2, 1, -4, -5, 2, 0, -3, -2, -5, -4, 2, -1, 0, -2, -3, 1, 0, -4, 1, 1, -4, -1, -3, 0, 3, -2, -5, -4, -3, 2, -3, 1, -2, -2, -2, -3, -5, -2, -1, -1, -5, 4, -4, -2, -1, -7, 20, -3, 4, -4, -8, -2, 1, 4, -12, 12, 9, -9, -21, 11, -12, 2, -1, 6, -29, -11, 5, -7, -2, -19, 8, 19, 5, 4, 10, 9, 17, 7, 6, 2, 0, -44, -17, 16, -12, 10, 5, 18, -39, -2, -2, 13, -7, 13, 0, -17, -32, -16, 2, -3, 16, 3, 8, -4, -10, -48, -19, 0, 1, 19, 1, -5, 5, -3, -17, -7, 13, -7, -10, 5, -8, -3, -28, 13, -42, -17, 1, -11, 8, 2, -15, -25, 10, -31, -32, 18, 11, 27, -5, -23, -10, 23, -10, 19, -3, -69, -11, 24, 2, 11, 9, -2, -7, 5, -14, 10, 3, -17, 13, 7, 4, -5, -15, -5, 17, 12, -29, -35, -22, -12, -13, -6, -12, 7, -5, 16, 9, -33, 13, 17, 0, 16, 24, 4, 3, -14, -1, -19, 1, 6, 0, 8, -20, -35, -6, 14, 7, -18, -5, 31, -1, -24, 7, -3, -31, -2, 2, 8, -6, -14, -1, 8, -23, 13, 0, -2, 14, 17, -7, -19, 4, -6, -12, 4, -15, 13, -9, 2, 1, -11, 33, 37, 7, 1, 7, 0, -14, -1, -4, -21, -1, 18, 8, -2, -4, 18, -17, -21, 7, 11, -6, -12, 3, -1, -8, -6, 35, -6, -4, 14, 15, 6, 3, 27, -50, 13, -30, -15, -32, 11, -5, -2, -15, 14, 19, -1, 15, 11, 5, -53, 12, -18, -10, -49, 1, 3, 5, 5, 10, 9, -26, -38, 8, 0, 11, -1, 4, 2, 13, -7, -27, -2, 11, 1, 14, 12, 12, -3, 8, -11, -1, 7, 3, -10, 11, 5, -13, 10, -4, 12, 20, 6, 21, -1, 8, -4, -4, -14, -13, -14, 3, -5, -7, -10, 10, -4, -4, 16, -11, -14, -2, 4, 0, 8, 0, 8, -1, 4, 13, 19, 11, 6, -3, -15, -5, -5, -2, 34, -5, 3, 3, -10, 4, 6, -1, -9, -24, -21, 14, -12, 5, -1, -6, 12, 1, -5, -7, -2, -13, -10, -25, 3, 3, 15, 0, 4, 24, -13, -3, -12, -32, 8, -1, -23, 3, 8, -5, -1, 19, -2, -6, -11, -1, 1, 2, 5, -3, 7, -8, -1, 3, 5, -3, -2, 8, 29, -3, -21, 1, -3, 0, -3, -30, 9, 6, -5, -3, 4, -1, -1, 0, 19, 0, 2, 10, -16, -7, -10, 19, 16, 11, -20, 4, 6, -10, 10, -11, -4, 22, -3, 5, -4, -4, -31, 6, 13, -2, -2, 9, 9, -1, 10, 8, 3, 16, -6, 4, 1, 3, 15, 7, 8, -6, -5, 14, 13, -7, 8, 30, -1, -13, -7, 3, 10, -3, 24, -10, -9, 11, -9, 12, 9, -3, -8, -12, -4, 4, -22, 15, -4, -8, -1, -14, 0, 18, 13, 9, -3, 8, 21, -34, -3, 20, -4, -3, 4, 13, -1, -5, -5, -9, 9, 3, 13, 2, 3, -9, 18, -42, 20, 0, -2, 7, -19, 12, -1, 17, -12, -39, 15, -7, 7, 20, 39, -8, 14, -41, -12, 1, 7, 14, -16, 11, 8, 20, 4, 0, -27, -18, 13, -29, -1, 1, 2, -3, -27, -26, 2, -4, -27, 4, 9, 7, -1, 13, -43, -13, -14, -1, 7, -6, -50, 9, -38, -1, 5, -8, 18, -15, -18, -14, -15, 16, -17, 17, -19, 1, 7, 10, -15, 6, -24, 5, -26, 2, 6, -29, 5, -7, -12, 3, 3, -67, 11, 4, -1, -11, 18, 13, 4, -11, -8, 13, 14, -30, 10, 10, 10, -3, -44, -13, 0, 6, -13, 2, 2, 2, 4, 2, -25, -30, -6, -19, 14, 19, -48, 11, 13, -11, -7, 0, 10, -15, -17, 1, -15, 2, 1, -5, -10, -14, 4, 15, 3, 16, 3, 7, -32, -3, -9, -9, -22, -10, -53, 11, 10, -32, 3, 2, -26, 1, 8, -3, 2, -29, -22, -39, -12, -4, 6, 10, -1, 14, -17, -20, 15, -6, -5, 11, -6, 3, 4, 5, -24, -28, -22, -17, 8, -3, -3, -10, 4, -8, -10, 2, 10, -25, -3, 1, -3, -2, 15, 32, -12, -4, -23, 8, 7, 13, -18, 7, -19, 1, 6, 10, -7, 19, -18, 12, 6, -12, -9, -4, -21, 5, 4, 12, -4, -6, -21, -3, -26, -12, -17, 25, -13, 2, -6, -20, 26, -6, 13, 11, -12, -3, 5, 17, -4, -17, 3, 16, -11, 0, -21, 5, -13, 18, -12, 14, -2, -32, 8, -3, -1, -18, -7, 16, -34, -6, -18, 9, -1, 16, 25, 15, -9, 14, -2, 25, -2, -1, -24, 15, 25, 6, -11, 4, 5, 13, -1, 15, 15, -14, -4, 1, 1, 3, 3, 3, -1, 2, 1, -5, -2, -4, -4, -4, 0, 2, 2, -2, 0, 1, 0, -2, 1, -2, 2, 3, 0, -4, 2, 2, -4, 0, -2, -4, -2, 1, -4, 0, 2, -1, 1, -4, 1, 0, -1, -4, -4, -3, 1, -5, 1, 2, 0, 0, 1, -3, -4, -3, -4, -2, -1, -4, -2, -2, 1, -2, -1, 0, -1, -5, -3, 1, -2, 0, -5, -4, -4, -2, 1, -4, -2, -5, 2, 0, -1, -3, 3, 2, -3, 2, 1, 1, 1, -3, 0, -2, -1, -3, -1, 3, -1, -1, -4, -1, 2, -3, -3, -2, 2, 0, -3, 2, -4, 0, -1, 2, -3, -5, -4, 1, 1, 1, -3, -3, -2, 3, -1, 2, -2, -1, 2, -4, 0, -1, -3, 1, -4, -2, 0, 0, -2, 1, -1, -5, -1, -2, 1, -4, -4, -4, 0, 0, -4, -4, -1, 0, 2, 0, -1, -2, 0, -3, -4, 3, 1, -4, 1, -1, -1, -1, -2, 0, 2, -5, 1, -4, 0, -1, -1, 0, 0, -1, 2, -3, -4, -5, -2, 1, 1, -4, -5, -3, 0, -3, -5, 1, -1, 1, -1, -1, 0, -3, -3, -2, 0, 1, -2, -5, -3, -6, -2, 2, -4, -4, -3, -1, -2, -1, -4, -2, -2, -5, -4, -4, -3, 1, 1, 3, 1, -2, 1, -4, 3, -4, 0, 1, -4, 0, -2, 1, -1, 0, 1, -1, 0, -4, 0, -1, 1, -2, 1, -1, 0, 0, 2, 3, -15, 7, 6, 17, -17, 0, 7, -8, 24, 7, -6, 3, 10, -12, -25, 18, -2, 8, 6, 16, -4, -10, 2, 18, 28, 5, -1, 9, -16, 18, -10, -6, 13, 4, 7, -17, 21, 13, 0, 0, 17, -26, 2, -2, -35, 2, -22, -9, -23, 10, -21, -52, 7, 11, -3, 5, -37, 16, 4, -10, -4, -11, -2, -6, 6, 11, -18, -11, -7, 11, -34, 11, 20, 14, -10, 2, 7, -5, -6, -8, -3, -3, 13, 8, -5, -2, 11, -14, -16, 4, -4, 13, 1, 12, 4, -4, 14, 15, 11, 13, -19, -19, 31, -3, 10, 8, 15, 0, 0, 21, 2, -10, -5, 17, 15, -18, 0, 27, 5, -9, -7, 6, -1, -14, -12, -9, 12, 18, 14, -12, 6, -10, 3, -8, 11, 6, 5, 19, -13, 11, 12, -24, -3, 2, -14, 7, 7, 0, -13, 2, 1, -4, -6, 6, -3, 10, 17, 16, -26, -14, -9, 16, 6, -14, 0, -21, 8, 13, 6, -13, 10, -8, -1, 2, 0, 14, -30, 7, 2, -4, 4, -13, -16, 12, -17, -11, 2, -4, -5, -6, -3, -21, 16, -5, 0, 17, -18, 11, 2, 20, 13, 28, 11, -14, 9, -9, -20, -8, 15, 25, 21, 0, -6, 2, -4, 0, -13, -12, 17, 22, -21, 11, -5, 12, 12, 2, 23, 15, 4, -21, 14, -2, -3, -1, 4, 14, 20, 6, 0, 6, -38, 0, -5, 10, 4, 2, 3, -6, -6, -17, -5, 3, -12, -11, -23, -10, 10, 12, -21, -17, 6, -23, -15, 17, 10, 11, 16, -32, -3, -36, 9, -40, -16, 2, 16, 21, -8, -20, -23, -19, 20, 8, -22, 15, 6, 4, -14, -5, -31, 8, -16, -13, 9, -11, 18, -3, -31, 12, -2, -12, 19, -6, 4, 12, -4, -6, -43, -2, 7, -2, 1, 5, -8, -31, 20, -35, -21, 18, 2, -5, 18, 7, 9, 12, -15, 4, 8, 5, -10, -16, 18, 9, 18, -14, 15, 5, -3, 12, -4, 9, -2, 5, 7, -15, -18, -8, 4, 9, -3, 13, -18, 3, 9, -24, 1, 9, -4, -29, -11, -21, 7, -16, 3, -12, 5, 4, 16, 10, -8, 10, -16, 31, -7, 0, 12, 14, -1, 8, -3, 5, -14, -10, -3, -3, 8, -10, -41, 15, -24, 0, 9, 9, 17, -12, -5, -26, 6, 6, -13, -17, 10, 18, 20, -34, 0, 16, -9, -13, -17, -12, 23, 20, -6, -9, -7, 4, -8, -6, -39, 14, -11, 12, 2, 5, 2, -30, -28, 17, -3, 22, -18, 9, 7, 6, 31, 1, 3, 6, 12, 7, -5, -22, -12, -8, -46, 9, -16, -7, -11, -10, 21, -15, -1, -2, -8, -22, 4, 9, -32, -16, -15, -6, -12, 2, 2, 2, -21, 3, -22, 14, -2, -15, -9, 3, 12, -8, 0, -5, 2, 6, -17, 9, -8, 3, -10, -7, 1, -3, 10, -1, -8, -10, -36, 19, -34, 1, 8, -7, -1, -57, 9, 3, 9, 7, -16, -1, -19, 4, -18, -6, -4, -11, -40, 20, 7, 2, 6, 19, 7, -4, 1, -14, 5, 13, -7, 13, 1, 17, 11, -9, 8, 18, -12, 4, 16, 8, -40, 0, 24, -11, -14, -6, 1, -32, -4, -70, 3, -18, -14, 13, -11, 21, 34, -18, -20, 1, -16, -9, -41, 11, -9, -8, 5, -42, -4, -15, -4, 4, 19, 7, -3, 13, -9, -8, 8, -19, 8, -27, -19, -5, -1, 0, 14, 4, 6, -13, -16, -11, 11, -1, -12, -14, -1, 10, -49, 13, 4, -4, -3, 9, -23, -12, 14, 7, -15, -8, 20, -4, -40, -10, -7, -8, 19, 9, 7, 7, 7, 9, -9, 7, 3, -5, -33, -13, -4, -5, 14, -8, 2, -30, 9, -27, -11, -11, -2, -8, 4, -10, -4, -2, -6, 3, 51, -9, -23, 3, 10, -4, -18, -6, 0, 2, 2, 5, -13, 1, -3, 6, -20, -7, -17, -27, 6, 5, -1, 15, 17, -9, -14, 22, 16, 8, -9, 6, -15, -8, 34, -6, 25, -13, 16, -8, 21, -7, -8, 11, -34, 0, -3, 0, -25, -12, 2, 6, 1, 11, -30, 6, 35, 2, -12, 18, 4, -37, 12, 17, -7, -3, -9, 13, -10, 15, 5, -5, 25, -14, 23, 3, -79, 2, 2, -31, 1, -14, -4, -24, 4, 12, 11, -13, -21, -35, -19, 14, -11, 0, 10, 13, 1, -3, 8, 20, 19, -4, 17, -2, 16, 19, -6, -21, -10, 10, -14, 6, -7, 2, -10, -25, -14, -5, 4, -3, -1, 12, 1, 12, -5, 7, -21, -15, -19, -9, 26, -7, 4, 11, -8, -25, -18, -36, -22, 2, -3, -1, -13, -3, -33, -35, -13, 8, -2, -9, -15, 4, -1, -6, 3, -3, -4, -38, -24, 15, 7, -14, -4, 1, 21, 4, -17, 31, 11, -57, -12, 9, -19, -9, 36, -9, 5, -15, 1, -1, 8, -8, 14, 4, -11, 5, 23, 19, 17, -8, 1, -39, 5, 0, 8, -5, 2, -8, -44, -15, -2, -4, -36, -6, 7, -13, -10, -2, -25, -21, -14, -20, 7, 10, -12, 6, -7, 7, -5, 1, -12, 2, 3, -29, 19, 3, -6, 34, -14, -15, 10, 18, -5, -35, -4, 0, -18, 3, 32, 3, 6, 4, 2, 9, 11, -3, -12, 6, -4, 12, 3, -8, 9, -10, -12, -15, -17, -4, -1, 9, -1, -1, 31, -16, 16, -5, -9, 5, -4, -6, 7, -10, 23, -37, 19, -11, 0, -18, -3, 13, 0, -7, -10, 5, 17, -18, -6, -15, 2, -23, 2, 11, -29, -17, -12, 3, 7, 10, -22, 4, -14, 9, -2, 6, 19, -17, -7, 15, 30, -57, 8, 27, -20, -5, 17, 4, 18, 11, -26, 9, -5, -40, -20, 1, -14, -7, 5, -28, 6, -2, -6, -9, -6, -14, -3, -2, -10, -23, 1, 39, -4, -5, -29, -1, 6, -5, 8, -8, -2, -25, 5, -25, -27, -2, -17, 42, -3, 24, -3, 5, 1, -5, 4, 18, 6, 8, 21, 25, -4, -26, -23, 12, 27, -49, 9, -31, -18, 11, 4, 2, 3, -14, -23, -19, -15, 11, 3, 0, -5, -4, -7, -8, -23, -13, -31, 13, 5, 1, -8, -4, -27, -13, -3, 11, 2, -16, -19, 24, -25, 4, -10, -7, -9, 1, -6, 17, 3, 1, -15, 25, 0, 4, -18, 3, -10, 18, -4, 21, -4, 4, 17, 13, 30, -4, 9, 20, 12, -20, -4, -14, 4, -2, 8, 15, 11, 17, 2, -15, -6, -9, -5, -10, 5, 5, 29, -35, -9, 3, -4, -3, 26, 2, -9, 6, 2, -16, -3, 1, -2, -11, -14, 20, -14, 0, -8, 1, -4, -3, -16, -19, -8, -6, 3, 21, -9, -15, -35, 7, -4, 20, 6, 3, -14, -3, 4, 14, 7, -17, 2, 15, 31, -16, 8, 12, -17, 22, 3, 1, -1, 9, -12, 23, -3, -20, -1, -2, -4, 7, 15, -31, -6, 0, 10, -2, 2, -1, -7, -3, -11, -13, 3, 2, -7, -20, 9, 7, 2, -10, -3, -7, 6, 8, -21, -2, 1, 1, 7, 10, -3, 5, 4, 4, -3, 12, 3, 11, -2, 6, 18, 32, -4, -34, -9, 9, -8, -11, 10, -8, 0, 3, 5, -1, -9, 17, 5, -5, 17, -33, -12, -10, 5, 12, 0, -36, -2, 3, 16, 1, 14, 17, -7, 16, -11, -21, -19, 1, -14, -30, 18, 15, -3, -1, -7, -3, -21, 14, -20, 1, -9, -3, -15, 20, -7, -6, -14, -16, -2, -20, 18, 6, 4, -1, 6, 6, -6, -12, -4, 23, 9, -13, -17, 1, 26, 5, 7, 9, -3, 17, -6, -27, -4, 0, 9, -4, -17, 5, 10, 0, -13, -17, 9, -22, 38, -21, -5, -7, -6, 1, 3, 16, -8, -5, -9, 4, -7, 6, 18, -7, -12, 8, -34, 12, -13, 2, 0, -43, 30, -12, -8, -4, 16, 8, -2, 3, 13, 15, -23, 10, -27, -18, -9, 10, 16, -8, -8, -9, -35, 9, 11, 4, -28, 6, -5, 18, 13, -13, 2, 9, -5, 4, -25, -12, 20, -10, 3, -7, 2, -5, -1, -3, -6, -30, 3, 8, -1, -10, -6, -11, -31, -3, 22, 0, -24, 18, 4, 22, 16, -32, -8, 0, -30, 12, -65, 2, 18, 11, -16, 5, 12, 5, 10, 3, -3, 13, -13, -12, 0, -9, -10, -12, -42, -3, 28, -18, -2, -1, 18, 0, -21, 21, 1, 8, -2, 8, 14, 2, 7, 2, 28, 10, 12, -5, 5, 8, -1, -6, -2, 13, 0, -14, -7, 7, 10, 18, 2, 12, -4, 23, -1, -29, 13, -12, -3, -10, -7, 9, -24, 18, 9, 4, 17, -2, -17, -3, 0, 5, -25, 6, 24, -5, 7, 0, -18, -1, -23, 14, -9, 17, 3, 6, -6, -5, -6, 2, -12, -23, -8, -7, -6, 1, -24, -19, -18, -12, 6, 13, -6, -16, -17, 19, 1, 9, -3, 6, 15, -6, -25, -10, 18, 1, -3, -10, -10, 11, -19, -7, 8, -39, -13, 1, -20, 6, 6, -20, -23, 3, -5, -10, -6, 19, 17, -12, 1, -18, 10, 2, -9, 3, -37, 4, -6, -5, -13, -19, 2, -20, 10, 15, -23, -31, 34, -14, 6, 6, -23, 4, 4, -16, -1, -3, -3, 16, 6, -2, 10, -15, -1, -2, 11, -12, -5, 12, -17, 0, 13, -4, -30, 3, 15, 7, 40, 18, -2, 4, -7, -15, 8, 5, 15, 6, -5, 4, -2, -1, 24, 3, -8, -11, 4, 9, -16, 2, 11, 0, 3, 10, 21, -4, 5, 2, 30, 9, -19, -10, -10, -4, 18, 12, -4, -13, 6, -3, -17, 9, -7, -5, 8, 12, -2, 4, -20, 17, 4, 6, -9, 2, -8, 20, 12, -21, 9, 25, -6, -4, -20, 9, 6, 18, -7, -32, 19, -11, -10, 14, -13, 2, 11, 4, -8, -32, 2, -4, -10, 33, -5, -2, 32, -17, -7, -3, -8, -22, 24, 14, 13, -1, -18, 0, 0, 9, 5, 33, 9, 7, 14, 5, 3, -16, -21, 4, 28, 2, -4, -3, 9, 2, -2, 0, 14, 2, 7, -5, -41, 9, -3, -30, 2, 26, 13, -1, 6, 11, 17, -12, -21, -15, -1, 5, -6, 13, 2, -19, -4, 4, -7, 17, -25, 9, 1, -1, 38, -9, 5, -8, 1, -3, 16, -13, -7, -18, 16, 12, -15, -1, 22, 17, -33, -10, 39, -6, -16, -8, -3, 11, 10, 13, 6, -15, 0, 7, -55, 1, -9, 22, -3, -2, -2, -25, -13, -51, 14, 13, -30, 1, 8, -6, 5, -33, -21, -12, 1, 0, -22, 3, -15, -13, 32, 14, -5, 27, 16, -21, -5, -19, 2, -3, 11, 10, -6, -4}

#define TENSOR_CONV2D_5_KERNEL_0_DEC_BITS {5}

#define TENSOR_CONV2D_5_BIAS_0 {-8, -8, -9, -89, -7, -12, 23, -7, -8, 14, -68, 17, -7, 23, 29, 30, 3, 7, 0, 3}

#define TENSOR_CONV2D_5_BIAS_0_DEC_BITS {7}

#define CONV2D_5_BIAS_LSHIFT {5}

#define CONV2D_5_OUTPUT_RSHIFT {8}

#define TENSOR_CONV2D_6_KERNEL_0 {4, -50, -8, -14, 27, 15, -6, -7, -10, -20, -42, -120, 6, 23, 21, -33, -28, -19, -20, -18, 20, -33, -6, -33, -25, 8, -3, 7, 8, -7, -11, -11, 8, 7, 44, -46, -19, -7, 4, -2, -73, -57, -16, -27, 17, 9, 32, -4, -16, 19, -5, 35, -6, 20, 43, -87, -26, 10, 5, 3, -54, 10, -14, 1, -73, -1, -14, -4, 6, 31, -17, -38, -3, -28, -2, 26, 15, -12, -12, -64, 37, 37, 20, -12, -1, -1, 3, 5, 6, -9, -37, 31, -15, -20, -47, 73, 33, 17, -17, 18, -9, -29, 16, -6, 34, 15, 21, 14, -8, -3, -50, 36, -11, 6, -41, 3, 44, -2, -24, 74, 59, -4, 16, -14, 18, 13, -27, 13, -13, -92, -9, 48, 12, 28, 35, -2, -7, 31, -45, -36, 23, 3, -2, -17, -15, 3, -9, 2, 6, -24, 29, 25, 4, 26, -66, 17, -32, 5, -25, 17, -9, 48, -3, 12, -26, 5, -20, -13, -16, 21, -26, 12, -2, -35, 1, -13, 48, -2, 21, -54, 22, 30, -14, -7, 57, 13, 10, 16, 10, -10, 11, -10, 20, -25, 17, 24, -32, 22, -2, 4, 6, -13, 1, 19, -8, 16, -28, -11, -19, 15, -8, -26, -2, -48, -6, -28, 10, 8, -17, 9, -41, -14, 10, 5, 8, -8, 12, 10, 7, -18, -31, -7, -15, 12, 8, -35, 10, 5, -14, -28, 19, -5, 4, 0, 2, 4, 61, -15, -17, 32, 1, -24, -6, 13, -12, -14, 27, -29, 36, 27, 24, 15, -15, 6, 9, -12, -15, 4, 3, -3, 11, -4, 5, 15, -2, -10, -5, -18, -24, 5, -7, -11, 11, 21, 10, -7, -17, -6, -12, -46, 42, 25, 6, 46, 12, -37, 27, 38, 18, -21, 5, 3, -13, 34, 16, 13, -19, 12, 0, 1, 36, -34, 7, 13, 7, 8, 16, 6, 14, -27, -48, 33, -7, -45, 6, 3, 19, -6, -7, -7, -29, 42, 8, 33, -23, 32, -10, 23, -44, 22, 10, -27, 15, 36, 13, -1, 35, -3, -4, 50, -7, 21, 14, -44, 40, -55, 95, 5, 12, 14, 43, 0, -3, 11, -13, -1, -63, 8, -12, -3, 51, -29, 4, -9, -31, -3, -40, 4, -7, 2, 14, -17, 5, 34, 25, 14, -43, 1, -17, 25, 8, -21, -18, -3, 24, -3, 21, -45, 2, 20, -1, -11, 1, 21, 26, 5, 25, -14, -16, -23, -10, -7, -2, 3, 47, -9, 28, 21, 36, -8, -5, -10, -4, 24, -15, -8, 37, 15, 5, -74, -32, -24, -13, -5, 37, 3, -16, 33, -15, 10, 22, -16, 8, -1, 9, 13, -74, 15, 0, -36, 38, -17, 10, 1, -11, -22, -32, -53, 1, 23, 7, 11, 12, 35, 8, 2, -33, 14, 8, 43, 33, -95, -2, 3, -2, -1, 20, -50, 5, -43, -18, 43, 11, 18, 18, -1, -36, -14, -15, 0, 10, -12, 1, 21, 18, 26, -4, 15, 26, 7, 19, 2, -9, 1, -12, -9, -29, -3, -5, 37, 28, -54, 15, 18, 7, 33, -23, -33, 46, 61, -115, -24, 10, -19, -9, 11, 45, -6, -8, 9, -22, 1, 20, 10, 6, -18, 27, 1, -15, -4, -3, -17, 15, -46, -16, -14, 42, -9, -5, 12, -40, -7, 6, -105, 31, 25, 48, 18, 34, -22, -73, 35, 12, 27, -7, 16, 18, -17, -17, 0, 3, 4, 15, 12, 26, 37, 23, 9, -25, -17, -39, 7, -2, -14, 11, -8, 6, 15, -14, 8, 23, 17, -6, -10, -82, -3, -3, -9, -14, 63, -78, -28, 9, -20, 19, 12, 35, 16, 11, 24, 18, 20, -14, -5, -17, 21, -12, -13, 20, 14, -51, -14, -12, 13, -7, 4, 8, -10, 15, 42, -30, 9, 15, -89, -16, -21, 37, -30, 0, -24}

#define TENSOR_CONV2D_6_KERNEL_0_DEC_BITS {6}

#define TENSOR_CONV2D_6_BIAS_0 {39, 25, 15, 18, 19, -9, -39, -29, 28, -65, 4, -41, -39, 4, -10, 9}

#define TENSOR_CONV2D_6_BIAS_0_DEC_BITS {7}

#define CONV2D_6_BIAS_LSHIFT {3}

#define CONV2D_6_OUTPUT_RSHIFT {7}

#define TENSOR_CONV2D_7_KERNEL_0 {21, 11, -1, -6, -19, 14, 6, -6, -3, 6, 0, 10, -9, 9, -1, 19, -21, 27, -12, 5, 1, 18, 4, 9, -34, 6, -16, 4, 7, -24, 3, -2, 10, 30, -4, -10, 1, 11, 13, -11, -8, 8, 4, 16, -4, -6, -3, 12, -16, 25, -11, 13, -8, 8, -18, 10, -12, -4, -24, 19, -1, -18, 6, -4, -15, 26, -23, -19, -12, 2, 4, 12, 3, -8, 6, 5, -16, 12, 9, 5, -52, 19, -24, -8, 11, 4, -7, -10, -27, 15, 10, -19, -13, 8, -25, -13, -7, 5, 11, 6, -22, 5, -5, 0, -34, -47, -13, 12, -6, -31, 5, -27, 27, -25, 5, -28, 3, 4, -5, -41, 16, 4, -13, -24, -11, 12, -2, 1, -1, -18, 11, 19, 6, -19, -12, 1, 3, -18, -6, -13, -23, -22, -36, -42, 8, 8, -11, -16, -8, -5, -4, -25, 4, -12, -11, -34, -27, 21, -10, 22, -20, 24, -16, -21, -14, -4, -2, 11, 9, 8, 13, 14, -15, -5, -11, -2, -31, 2, -34, -34, 11, 16, -1, -12, -12, -13, 4, -17, -17, 13, -26, -8, -6, 6, -1, -9, -16, 6, -8, -1, 4, 13, 8, 15, 0, -30, -9, 9, -21, -13, -10, -20, 8, 17, -5, -4, 3, -24, -3, -19, -15, -32, 2, -1, 2, -4, -3, -7, -9, -5, -7, 2, -6, -7, -11, 5, -10, 4, -1, 2, -8, 1, 0, 3, 0, -9, -10, -1, -4, -10, -7, 2, -1, -3, 3, -7, 1, -10, -10, -8, -2, 3, -13, -11, -4, -6, -12, -1, -2, -3, 0, 2, 7, 1, -6, -4, -11, 9, -7, 1, -7, 3, 1, 1, 4, -10, 3, 1, -7, 18, -22, -13, -11, -7, -1, 8, 8, 10, 15, 1, -9, 5, 3, 10, -14, 14, -32, -15, 10, 9, -2, -3, -24, 0, 1, -35, -20, 7, -21, -4, 2, -44, 7, 12, 6, 18, -31, -32, -27, -22, -1, -40, -15, -57, -55, -32, 12, 6, 6, -14, -11, 13, -21, 3, 11, -22, -12, -32, -20, 9, -13, 17, 3, 7, 14, 6, -34, 0, -18, 7, -24, -57, -12, 2, -5, 7, 1, -53, 28, -39, 0, -37, 7, 12, -6, -48, 20, 9, -9, -34, -12, 11, 3, -1, 20, 1, -8, 7, -28, 14, 10, -14, 6, 4, -3, 15, -12, 12, 9, 18, -7, 27, -16, 1, -4, 4, 1, 14, -35, 6, -18, 0, 13, -20, 1, 3, 14, 30, 5, -24, 7, -2, 15, -18, -14, 4, 9, 4, -19, -1, -20, 15, -21, 20, -13, 14, -25, -18, -13, 2, -11, -14, -21, -5, -1, -7, 1, -39, -18, 16, -1, -3, -19, 4, -6, -12, 3, 11, -6, 18, -9, -2, 3, 6, -25, 17, -2, 5, 2, -3, 5, 9, -15, 0, -10, 8, 7, -21, 5, 3, 9, -18, 7, 19, -10, -5, -37, -8, -3, -24, -8, -16, -21, -16, -33, -30, 1, 7, -5, -13, -8, 10, 7, -5, 7, -24, -1, -77, -35, 16, -16, 31}

#define TENSOR_CONV2D_7_KERNEL_0_DEC_BITS {5}

#define TENSOR_CONV2D_7_BIAS_0 {-51, -61, 21, -6, 0, 12, -44, -30, -28, -14, -15, -26, -60, 10, -84, -13}

#define TENSOR_CONV2D_7_BIAS_0_DEC_BITS {8}

#define CONV2D_7_BIAS_LSHIFT {0}

#define CONV2D_7_OUTPUT_RSHIFT {5}

#define TENSOR_DENSE_1_KERNEL_0 {13, 7, -43, 2, 3, -32, 8, 12, 13, 9, -3, -35, 3, -38, 6, 2, -30, -21, -19, 18, 3, 3, -29, -42, -33, 10, -1, -14, 6, 14, -6, 1, -13, -15, -33, -30, 6, -12, 9, 8, -33, 9, 6, -23, 10, 14, 13, 9, 18, 12, 12, 7, 9, -19, -10, -72, 11, -27, -24, -15, 8, -27, 9, 10, -32, -30, -67, -76, -75, -61, -77, 13, 9, -70, -76, -57, -24, -75, -42, -73, -56, -47, -17, 10, 5, -19, -22, -14, 0, -22, 13, 16, -44, -52, -45, 11}

#define TENSOR_DENSE_1_KERNEL_0_DEC_BITS {5}

#define TENSOR_DENSE_1_BIAS_0 {-14, 10, -52, -16, 90, 1}

#define TENSOR_DENSE_1_BIAS_0_DEC_BITS {5}

#define DENSE_1_BIAS_LSHIFT {3}

#define DENSE_1_OUTPUT_RSHIFT {8}


/* output q format for each layer */
#define CONV2D_4_INPUT_OUTPUT_DEC 9
#define CONV2D_4_INPUT_OUTPUT_OFFSET 0
#define CONV2D_4_OUTPUT_DEC 7
#define CONV2D_4_OUTPUT_OFFSET 0
#define RE_LU_4_OUTPUT_DEC 7
#define RE_LU_4_OUTPUT_OFFSET 0
#define CONV2D_5_OUTPUT_DEC 4
#define CONV2D_5_OUTPUT_OFFSET 0
#define RE_LU_5_OUTPUT_DEC 4
#define RE_LU_5_OUTPUT_OFFSET 0
#define CONV2D_6_OUTPUT_DEC 3
#define CONV2D_6_OUTPUT_OFFSET 0
#define RE_LU_6_OUTPUT_DEC 3
#define RE_LU_6_OUTPUT_OFFSET 0
#define CONV2D_7_OUTPUT_DEC 3
#define CONV2D_7_OUTPUT_OFFSET 0
#define RE_LU_7_OUTPUT_DEC 3
#define RE_LU_7_OUTPUT_OFFSET 0
#define GLOBAL_MAX_POOLING2D_1_OUTPUT_DEC 3
#define GLOBAL_MAX_POOLING2D_1_OUTPUT_OFFSET 0
#define FLATTEN_1_OUTPUT_DEC 3
#define FLATTEN_1_OUTPUT_OFFSET 0
#define DROPOUT_1_OUTPUT_DEC 3
#define DROPOUT_1_OUTPUT_OFFSET 0
#define DENSE_1_OUTPUT_DEC 0
#define DENSE_1_OUTPUT_OFFSET 0
#define SOFTMAX_1_OUTPUT_DEC 7
#define SOFTMAX_1_OUTPUT_OFFSET 0

/* bias shift and output shift for none-weighted layer */

/* tensors and configurations for each layer */
static int8_t nnom_input_data[192] = {0};

const nnom_shape_data_t tensor_Placeholder_0_dim[] = {64, 3, 1};
const nnom_qformat_param_t tensor_Placeholder_0_dec[] = {9};
const nnom_qformat_param_t tensor_Placeholder_0_offset[] = {0};
const nnom_tensor_t tensor_Placeholder_0 = {
    .p_data = (void*)nnom_input_data,
    .dim = (nnom_shape_data_t*)tensor_Placeholder_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_Placeholder_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_Placeholder_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 3,
    .bitwidth = 8
};

const nnom_io_config_t conv2d_4_input_config = {
    .super = {.name = "conv2d_4_input"},
    .tensor = (nnom_tensor_t*)&tensor_Placeholder_0
};
const int8_t tensor_conv2d_4_kernel_0_data[] = TENSOR_CONV2D_4_KERNEL_0;

const nnom_shape_data_t tensor_conv2d_4_kernel_0_dim[] = {6, 2, 1, 32};
const nnom_qformat_param_t tensor_conv2d_4_kernel_0_dec[] = TENSOR_CONV2D_4_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv2d_4_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_conv2d_4_kernel_0 = {
    .p_data = (void*)tensor_conv2d_4_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv2d_4_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv2d_4_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv2d_4_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 4,
    .bitwidth = 8
};
const int8_t tensor_conv2d_4_bias_0_data[] = TENSOR_CONV2D_4_BIAS_0;

const nnom_shape_data_t tensor_conv2d_4_bias_0_dim[] = {32};
const nnom_qformat_param_t tensor_conv2d_4_bias_0_dec[] = TENSOR_CONV2D_4_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv2d_4_bias_0_offset[] = {0};
const nnom_tensor_t tensor_conv2d_4_bias_0 = {
    .p_data = (void*)tensor_conv2d_4_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv2d_4_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv2d_4_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv2d_4_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t conv2d_4_output_shift[] = CONV2D_4_OUTPUT_RSHIFT;
const nnom_qformat_param_t conv2d_4_bias_shift[] = CONV2D_4_BIAS_LSHIFT;
const nnom_conv2d_config_t conv2d_4_config = {
    .super = {.name = "conv2d_4"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_conv2d_4_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_conv2d_4_bias_0,
    .output_shift = (nnom_qformat_param_t *)&conv2d_4_output_shift, 
    .bias_shift = (nnom_qformat_param_t *)&conv2d_4_bias_shift, 
    .filter_size = 32,
    .kernel_size = {6, 2},
    .stride_size = {1, 1},
    .padding_size = {0, 0},
    .dilation_size = {1, 1},
    .padding_type = PADDING_VALID
};
const int8_t tensor_conv2d_5_kernel_0_data[] = TENSOR_CONV2D_5_KERNEL_0;

const nnom_shape_data_t tensor_conv2d_5_kernel_0_dim[] = {4, 2, 32, 20};
const nnom_qformat_param_t tensor_conv2d_5_kernel_0_dec[] = TENSOR_CONV2D_5_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv2d_5_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_conv2d_5_kernel_0 = {
    .p_data = (void*)tensor_conv2d_5_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv2d_5_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv2d_5_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv2d_5_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 4,
    .bitwidth = 8
};
const int8_t tensor_conv2d_5_bias_0_data[] = TENSOR_CONV2D_5_BIAS_0;

const nnom_shape_data_t tensor_conv2d_5_bias_0_dim[] = {20};
const nnom_qformat_param_t tensor_conv2d_5_bias_0_dec[] = TENSOR_CONV2D_5_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv2d_5_bias_0_offset[] = {0};
const nnom_tensor_t tensor_conv2d_5_bias_0 = {
    .p_data = (void*)tensor_conv2d_5_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv2d_5_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv2d_5_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv2d_5_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t conv2d_5_output_shift[] = CONV2D_5_OUTPUT_RSHIFT;
const nnom_qformat_param_t conv2d_5_bias_shift[] = CONV2D_5_BIAS_LSHIFT;
const nnom_conv2d_config_t conv2d_5_config = {
    .super = {.name = "conv2d_5"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_conv2d_5_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_conv2d_5_bias_0,
    .output_shift = (nnom_qformat_param_t *)&conv2d_5_output_shift, 
    .bias_shift = (nnom_qformat_param_t *)&conv2d_5_bias_shift, 
    .filter_size = 20,
    .kernel_size = {4, 2},
    .stride_size = {1, 1},
    .padding_size = {0, 0},
    .dilation_size = {1, 1},
    .padding_type = PADDING_VALID
};
const int8_t tensor_conv2d_6_kernel_0_data[] = TENSOR_CONV2D_6_KERNEL_0;

const nnom_shape_data_t tensor_conv2d_6_kernel_0_dim[] = {2, 1, 20, 16};
const nnom_qformat_param_t tensor_conv2d_6_kernel_0_dec[] = TENSOR_CONV2D_6_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv2d_6_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_conv2d_6_kernel_0 = {
    .p_data = (void*)tensor_conv2d_6_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv2d_6_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv2d_6_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv2d_6_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 4,
    .bitwidth = 8
};
const int8_t tensor_conv2d_6_bias_0_data[] = TENSOR_CONV2D_6_BIAS_0;

const nnom_shape_data_t tensor_conv2d_6_bias_0_dim[] = {16};
const nnom_qformat_param_t tensor_conv2d_6_bias_0_dec[] = TENSOR_CONV2D_6_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv2d_6_bias_0_offset[] = {0};
const nnom_tensor_t tensor_conv2d_6_bias_0 = {
    .p_data = (void*)tensor_conv2d_6_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv2d_6_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv2d_6_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv2d_6_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t conv2d_6_output_shift[] = CONV2D_6_OUTPUT_RSHIFT;
const nnom_qformat_param_t conv2d_6_bias_shift[] = CONV2D_6_BIAS_LSHIFT;
const nnom_conv2d_config_t conv2d_6_config = {
    .super = {.name = "conv2d_6"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_conv2d_6_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_conv2d_6_bias_0,
    .output_shift = (nnom_qformat_param_t *)&conv2d_6_output_shift, 
    .bias_shift = (nnom_qformat_param_t *)&conv2d_6_bias_shift, 
    .filter_size = 16,
    .kernel_size = {2, 1},
    .stride_size = {1, 1},
    .padding_size = {0, 0},
    .dilation_size = {1, 1},
    .padding_type = PADDING_VALID
};
const int8_t tensor_conv2d_7_kernel_0_data[] = TENSOR_CONV2D_7_KERNEL_0;

const nnom_shape_data_t tensor_conv2d_7_kernel_0_dim[] = {2, 1, 16, 16};
const nnom_qformat_param_t tensor_conv2d_7_kernel_0_dec[] = TENSOR_CONV2D_7_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv2d_7_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_conv2d_7_kernel_0 = {
    .p_data = (void*)tensor_conv2d_7_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv2d_7_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv2d_7_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv2d_7_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 4,
    .bitwidth = 8
};
const int8_t tensor_conv2d_7_bias_0_data[] = TENSOR_CONV2D_7_BIAS_0;

const nnom_shape_data_t tensor_conv2d_7_bias_0_dim[] = {16};
const nnom_qformat_param_t tensor_conv2d_7_bias_0_dec[] = TENSOR_CONV2D_7_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv2d_7_bias_0_offset[] = {0};
const nnom_tensor_t tensor_conv2d_7_bias_0 = {
    .p_data = (void*)tensor_conv2d_7_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv2d_7_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv2d_7_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv2d_7_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t conv2d_7_output_shift[] = CONV2D_7_OUTPUT_RSHIFT;
const nnom_qformat_param_t conv2d_7_bias_shift[] = CONV2D_7_BIAS_LSHIFT;
const nnom_conv2d_config_t conv2d_7_config = {
    .super = {.name = "conv2d_7"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_conv2d_7_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_conv2d_7_bias_0,
    .output_shift = (nnom_qformat_param_t *)&conv2d_7_output_shift, 
    .bias_shift = (nnom_qformat_param_t *)&conv2d_7_bias_shift, 
    .filter_size = 16,
    .kernel_size = {2, 1},
    .stride_size = {1, 1},
    .padding_size = {0, 0},
    .dilation_size = {1, 1},
    .padding_type = PADDING_VALID
};

const nnom_global_pool_config_t global_max_pooling2d_1_config = {
    .super = {.name = "global_max_pooling2d_1"},
    .output_shift = 0,
};

const nnom_flatten_config_t flatten_1_config = {
    .super = {.name = "flatten_1"}
};
const int8_t tensor_dense_1_kernel_0_data[] = TENSOR_DENSE_1_KERNEL_0;

const nnom_shape_data_t tensor_dense_1_kernel_0_dim[] = {16, 6};
const nnom_qformat_param_t tensor_dense_1_kernel_0_dec[] = TENSOR_DENSE_1_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_dense_1_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_dense_1_kernel_0 = {
    .p_data = (void*)tensor_dense_1_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_dense_1_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_dense_1_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_dense_1_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 2,
    .bitwidth = 8
};
const int8_t tensor_dense_1_bias_0_data[] = TENSOR_DENSE_1_BIAS_0;

const nnom_shape_data_t tensor_dense_1_bias_0_dim[] = {6};
const nnom_qformat_param_t tensor_dense_1_bias_0_dec[] = TENSOR_DENSE_1_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_dense_1_bias_0_offset[] = {0};
const nnom_tensor_t tensor_dense_1_bias_0 = {
    .p_data = (void*)tensor_dense_1_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_dense_1_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_dense_1_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_dense_1_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t dense_1_output_shift[] = DENSE_1_OUTPUT_RSHIFT;
const nnom_qformat_param_t dense_1_bias_shift[] = DENSE_1_BIAS_LSHIFT;
const nnom_dense_config_t dense_1_config = {
    .super = {.name = "dense_1"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_dense_1_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_dense_1_bias_0,
    .output_shift = (nnom_qformat_param_t *)&dense_1_output_shift,
    .bias_shift = (nnom_qformat_param_t *)&dense_1_bias_shift
};

const nnom_softmax_config_t softmax_1_config = {
    .super = {.name = "softmax_1"}
};
static int8_t nnom_output_data[6] = {0};

const nnom_shape_data_t tensor_output0_dim[] = {6};
const nnom_qformat_param_t tensor_output0_dec[] = {SOFTMAX_1_OUTPUT_DEC};
const nnom_qformat_param_t tensor_output0_offset[] = {0};
const nnom_tensor_t tensor_output0 = {
    .p_data = (void*)nnom_output_data,
    .dim = (nnom_shape_data_t*)tensor_output0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_output0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_output0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_io_config_t output0_config = {
    .super = {.name = "output0"},
    .tensor = (nnom_tensor_t*)&tensor_output0
};
/* model version */
#define NNOM_MODEL_VERSION (10000*0 + 100*4 + 3)

/* nnom model */
static nnom_model_t* nnom_model_create(nnom_status_t *state)
{
	static nnom_model_t model;
	nnom_layer_t* layer[14];

	check_model_version(NNOM_MODEL_VERSION);
	new_model(&model);

	layer[0] = input_s(&conv2d_4_input_config);
	layer[1] = model.hook(conv2d_s(&conv2d_4_config), layer[0]);
	layer[2] = model.active(act_relu(), layer[1]);
	layer[3] = model.hook(conv2d_s(&conv2d_5_config), layer[2]);
	layer[4] = model.active(act_relu(), layer[3]);
	layer[5] = model.hook(conv2d_s(&conv2d_6_config), layer[4]);
	layer[6] = model.active(act_relu(), layer[5]);
	layer[7] = model.hook(conv2d_s(&conv2d_7_config), layer[6]);
	layer[8] = model.active(act_relu(), layer[7]);
	layer[9] = model.hook(global_maxpool_s(&global_max_pooling2d_1_config), layer[8]);
	layer[10] = model.hook(flatten_s(&flatten_1_config), layer[9]);
	layer[11] = model.hook(dense_s(&dense_1_config), layer[10]);
	layer[12] = model.hook(softmax_s(&softmax_1_config), layer[11]);
	layer[13] = model.hook(output_s(&output0_config), layer[12]);
	*state = model_compile(&model, layer[0], layer[13]);
	return &model;
}
#endif // INCLUDE_MODEL

#endif //MODEL_35_NNOM_H